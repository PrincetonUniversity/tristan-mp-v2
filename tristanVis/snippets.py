def listFiles(dir_name):
  import os
  import numpy as np
  names = []
  for root, directory, files in os.walk(dir_name):
    if root == dir_name:
      for name in files:
        names.append(name)
  return np.array(names)

def make_get_proj(self, rx, ry, rz):
  '''
  Return a variation on :func:`~mpl_toolkit.mplot2d.axes3d.Axes3D.getproj` that
  makes the box aspect ratio equal to *rx:ry:rz*, using an axes object *self*.
  '''
  import numpy as np
  from mpl_toolkits.mplot3d import proj3d

  rm = max(rx, ry, rz)
  kx = rm / rx; ky = rm / ry; kz = rm / rz;

  # Copied directly from mpl_toolkit/mplot3d/axes3d.py. New or modified lines are
  # marked by ##
  def get_proj():
    relev, razim = np.pi * self.elev/180, np.pi * self.azim/180

    xmin, xmax = self.get_xlim3d()
    ymin, ymax = self.get_ylim3d()
    zmin, zmax = self.get_zlim3d()

    # transform to uniform world coordinates 0-1.0,0-1.0,0-1.0
    worldM = proj3d.world_transformation(xmin, xmax,
                                         ymin, ymax,
                                         zmin, zmax)

    # adjust the aspect ratio                          ##
    aspectM = proj3d.world_transformation(-kx + 1, kx, ##
                                          -ky + 1, ky, ##
                                          -kz + 1, kz) ##

    # look into the middle of the new coordinates
    R = np.array([0.5, 0.5, 0.5])

    xp = R[0] + np.cos(razim) * np.cos(relev) * self.dist
    yp = R[1] + np.sin(razim) * np.cos(relev) * self.dist
    zp = R[2] + np.sin(relev) * self.dist
    E = np.array((xp, yp, zp))

    self.eye = E
    self.vvec = R - E
    self.vvec = self.vvec / np.linalg.norm(self.vvec)

    if abs(relev) > np.pi/2:
        # upside down
        V = np.array((0, 0, -1))
    else:
        V = np.array((0, 0, 1))
    zfront, zback = -self.dist, self.dist

    viewM = proj3d.view_transformation(E, R, V)
    perspM = proj3d.persp_transformation(zfront, zback)
    M0 = np.dot(viewM, np.dot(aspectM, worldM)) ##
    M = np.dot(perspM, M0)
    return M
  return get_proj

def loadCustomStyles(style='default', fs=25, tex=True):
  import numpy as np
  import matplotlib.pyplot as plt
  import matplotlib as mpl
  from matplotlib import rc
  plt.style.use(style)
  rc('font',**{'family':'monospace','sans-serif':['Verdana'],'size':fs})
  rc('text', usetex=tex)
  idl_colormap_data = np.array([[0.,0.,0.],[0.,0.,0.00784313725490196],[0.,0.,0.01568627450980392],[0.,0.,0.023529411764705882],[0.,0.,0.03137254901960784],[0.,0.,0.0392156862745098],[0.,0.,0.047058823529411764],[0.,0.,0.054901960784313725],[0.,0.,0.06274509803921569],[0.,0.,0.07058823529411765],[0.,0.,0.0784313725490196],[0.,0.,0.08627450980392157],[0.,0.,0.09803921568627451],[0.,0.,0.10588235294117647],[0.,0.,0.11372549019607843],[0.,0.,0.12156862745098039],[0.,0.,0.12941176470588234],[0.,0.,0.13725490196078433],[0.,0.,0.14509803921568626],[0.,0.,0.15294117647058825],[0.,0.,0.16078431372549018],[0.,0.,0.16862745098039217],[0.,0.,0.1764705882352941],[0.,0.,0.1843137254901961],[0.,0.,0.19607843137254902],[0.,0.,0.20392156862745098],[0.,0.,0.21176470588235294],[0.,0.,0.2196078431372549],[0.,0.,0.22745098039215686],[0.,0.,0.23529411764705882],[0.,0.,0.24313725490196078],[0.,0.,0.25098039215686274],[0.,0.,0.2588235294117647],[0.,0.011764705882352941,0.26666666666666666],[0.,0.023529411764705882,0.27450980392156865],[0.,0.03529411764705882,0.2823529411764706],[0.,0.047058823529411764,0.29411764705882354],[0.,0.058823529411764705,0.30196078431372547],[0.,0.07058823529411765,0.30980392156862746],[0.,0.08235294117647059,0.3176470588235294],[0.,0.09803921568627451,0.3254901960784314],[0.,0.10980392156862745,0.3333333333333333],[0.,0.12156862745098039,0.3411764705882353],[0.,0.13333333333333333,0.34901960784313724],[0.,0.14509803921568626,0.3568627450980392],[0.,0.1568627450980392,0.36470588235294116],[0.,0.16862745098039217,0.37254901960784315],[0.,0.1803921568627451,0.3803921568627451],[0.,0.19607843137254902,0.39215686274509803],[0.,0.20784313725490194,0.39215686274509803],[0.,0.2196078431372549,0.39215686274509803],[0.,0.23137254901960785,0.39215686274509803],[0.,0.24313725490196078,0.39215686274509803],[0.,0.2549019607843137,0.39215686274509803],[0.,0.26666666666666666,0.39215686274509803],[0.,0.2784313725490196,0.39215686274509803],[0.,0.29411764705882354,0.39215686274509803],[0.,0.3058823529411765,0.39215686274509803],[0.,0.3176470588235294,0.39215686274509803],[0.,0.32941176470588235,0.39215686274509803],[0.,0.3411764705882353,0.39215686274509803],[0.,0.3529411764705882,0.39215686274509803],[0.,0.36470588235294116,0.39215686274509803],[0.,0.3764705882352941,0.39215686274509803],[0.,0.39215686274509803,0.39215686274509803],[0.,0.403921568627451,0.39215686274509803],[0.,0.4156862745098039,0.39215686274509803],[0.,0.42745098039215684,0.39215686274509803],[0.,0.4392156862745098,0.39215686274509803],[0.,0.45098039215686275,0.39215686274509803],[0.,0.4627450980392157,0.39215686274509803],[0.,0.4745098039215686,0.39215686274509803],[0.,0.49019607843137253,0.39215686274509803],[0.,0.5019607843137255,0.39215686274509803],[0.,0.5137254901960784,0.39215686274509803],[0.,0.5254901960784314,0.39215686274509803],[0.,0.5372549019607843,0.39215686274509803],[0.,0.5490196078431373,0.39215686274509803],[0.,0.5607843137254902,0.39215686274509803],[0.,0.5725490196078431,0.39215686274509803],[0.,0.5882352941176471,0.39215686274509803],[0.,0.5882352941176471,0.3764705882352941],[0.,0.5882352941176471,0.36470588235294116],[0.,0.5882352941176471,0.3529411764705882],[0.,0.5882352941176471,0.3411764705882353],[0.,0.5882352941176471,0.32941176470588235],[0.,0.5882352941176471,0.3176470588235294],[0.,0.5882352941176471,0.3058823529411765],[0.,0.5882352941176471,0.29411764705882354],[0.,0.5882352941176471,0.2784313725490196],[0.,0.5882352941176471,0.26666666666666666],[0.,0.5882352941176471,0.2549019607843137],[0.,0.5882352941176471,0.24313725490196078],[0.,0.5882352941176471,0.23137254901960785],[0.,0.5882352941176471,0.2196078431372549],[0.,0.5882352941176471,0.20784313725490194],[0.,0.5882352941176471,0.19607843137254902],[0.,0.5843137254901961,0.1803921568627451],[0.,0.580392156862745,0.16862745098039217],[0.,0.580392156862745,0.1568627450980392],[0.,0.5764705882352941,0.14509803921568626],[0.,0.5725490196078431,0.13333333333333333],[0.,0.5725490196078431,0.12156862745098039],[0.,0.5686274509803921,0.10980392156862745],[0.,0.5686274509803921,0.09803921568627451],[0.,0.5647058823529412,0.08235294117647059],[0.,0.5607843137254902,0.07058823529411765],[0.,0.5607843137254902,0.058823529411764705],[0.,0.5568627450980392,0.047058823529411764],[0.,0.5529411764705883,0.03529411764705882],[0.,0.5529411764705883,0.023529411764705882],[0.,0.5490196078431373,0.011764705882352941],[0.,0.5490196078431373,0.],[0.027450980392156862,0.5372549019607843,0.],[0.058823529411764705,0.5294117647058824,0.],[0.08627450980392157,0.5176470588235293,0.],[0.11764705882352941,0.5098039215686274,0.],[0.14509803921568626,0.4980392156862745,0.],[0.1764705882352941,0.49019607843137253,0.],[0.20392156862745098,0.4784313725490196,0.],[0.23529411764705882,0.47058823529411764,0.],[0.2627450980392157,0.4588235294117647,0.],[0.29411764705882354,0.45098039215686275,0.],[0.32156862745098036,0.4392156862745098,0.],[0.3529411764705882,0.43137254901960786,0.],[0.3803921568627451,0.4196078431372549,0.],[0.4117647058823529,0.4117647058823529,0.],[0.4392156862745098,0.4,0.],[0.47058823529411764,0.39215686274509803,0.],[0.49019607843137253,0.36470588235294116,0.],[0.5098039215686274,0.3411764705882353,0.],[0.5294117647058824,0.3176470588235294,0.],[0.5490196078431373,0.29411764705882354,0.],[0.5686274509803921,0.26666666666666666,0.],[0.5882352941176471,0.24313725490196078,0.],[0.6078431372549019,0.2196078431372549,0.],[0.6274509803921569,0.19607843137254902,0.],[0.6470588235294118,0.16862745098039217,0.],[0.6666666666666666,0.14509803921568626,0.],[0.6862745098039216,0.12156862745098039,0.],[0.7058823529411764,0.09803921568627451,0.],[0.7254901960784313,0.07058823529411765,0.],[0.7450980392156863,0.047058823529411764,0.],[0.7647058823529411,0.023529411764705882,0.],[0.7843137254901961,0.,0.],[0.7843137254901961,0.00784313725490196,0.],[0.788235294117647,0.01568627450980392,0.],[0.788235294117647,0.023529411764705882,0.],[0.792156862745098,0.03529411764705882,0.],[0.792156862745098,0.043137254901960784,0.],[0.796078431372549,0.050980392156862744,0.],[0.796078431372549,0.06274509803921569,0.],[0.8,0.07058823529411765,0.],[0.8,0.0784313725490196,0.],[0.803921568627451,0.09019607843137255,0.],[0.803921568627451,0.09803921568627451,0.],[0.807843137254902,0.10588235294117647,0.],[0.807843137254902,0.11372549019607843,0.],[0.8117647058823529,0.12549019607843137,0.],[0.8117647058823529,0.13333333333333333,0.],[0.8156862745098039,0.1411764705882353,0.],[0.8156862745098039,0.15294117647058825,0.],[0.8196078431372549,0.16078431372549018,0.],[0.8196078431372549,0.16862745098039217,0.],[0.8235294117647058,0.1803921568627451,0.],[0.8235294117647058,0.18823529411764706,0.],[0.8274509803921568,0.19607843137254902,0.],[0.8274509803921568,0.20784313725490194,0.],[0.8313725490196078,0.21568627450980393,0.],[0.8313725490196078,0.22352941176470587,0.],[0.8352941176470589,0.23137254901960785,0.],[0.8352941176470589,0.24313725490196078,0.],[0.8392156862745098,0.25098039215686274,0.],[0.8392156862745098,0.2588235294117647,0.],[0.8431372549019608,0.27058823529411763,0.],[0.8431372549019608,0.2784313725490196,0.],[0.8470588235294118,0.28627450980392155,0.],[0.8470588235294118,0.2980392156862745,0.],[0.8509803921568627,0.3058823529411765,0.],[0.8509803921568627,0.3137254901960784,0.],[0.8549019607843137,0.3254901960784314,0.],[0.8549019607843137,0.3333333333333333,0.],[0.8588235294117647,0.3411764705882353,0.],[0.8588235294117647,0.34901960784313724,0.],[0.8627450980392157,0.3607843137254902,0.],[0.8627450980392157,0.3686274509803922,0.],[0.8666666666666667,0.3764705882352941,0.],[0.8666666666666667,0.38823529411764707,0.],[0.8705882352941177,0.396078431372549,0.],[0.8705882352941177,0.403921568627451,0.],[0.8745098039215686,0.4156862745098039,0.],[0.8745098039215686,0.4235294117647059,0.],[0.8784313725490196,0.43137254901960786,0.],[0.8784313725490196,0.44313725490196076,0.],[0.8823529411764706,0.45098039215686275,0.],[0.8823529411764706,0.4588235294117647,0.],[0.8862745098039215,0.4666666666666667,0.],[0.8862745098039215,0.4784313725490196,0.],[0.8901960784313725,0.48627450980392156,0.],[0.8901960784313725,0.49411764705882355,0.],[0.8941176470588235,0.5058823529411764,0.],[0.8941176470588235,0.5137254901960784,0.],[0.8980392156862745,0.5215686274509804,0.],[0.8980392156862745,0.5333333333333333,0.],[0.9019607843137255,0.5411764705882353,0.],[0.9019607843137255,0.5490196078431373,0.],[0.9058823529411765,0.5568627450980392,0.],[0.9058823529411765,0.5686274509803921,0.],[0.9098039215686274,0.5764705882352941,0.],[0.9098039215686274,0.5843137254901961,0.],[0.9137254901960784,0.596078431372549,0.],[0.9137254901960784,0.6039215686274509,0.],[0.9176470588235294,0.611764705882353,0.],[0.9176470588235294,0.6235294117647059,0.],[0.9215686274509803,0.6313725490196078,0.],[0.9215686274509803,0.6392156862745098,0.],[0.9254901960784314,0.6509803921568628,0.],[0.9254901960784314,0.6588235294117647,0.],[0.9294117647058824,0.6666666666666666,0.],[0.9294117647058824,0.6745098039215687,0.],[0.9333333333333333,0.6862745098039216,0.],[0.9333333333333333,0.6941176470588235,0.],[0.9372549019607843,0.7019607843137254,0.],[0.9372549019607843,0.7137254901960784,0.],[0.9411764705882353,0.7215686274509804,0.],[0.9411764705882353,0.7294117647058823,0.],[0.9450980392156862,0.7411764705882353,0.],[0.9450980392156862,0.7490196078431373,0.],[0.9490196078431372,0.7568627450980392,0.],[0.9490196078431372,0.7686274509803921,0.],[0.9529411764705882,0.7764705882352941,0.],[0.9529411764705882,0.7843137254901961,0.],[0.9568627450980391,0.792156862745098,0.],[0.9568627450980391,0.803921568627451,0.],[0.9607843137254902,0.8117647058823529,0.],[0.9607843137254902,0.8196078431372549,0.],[0.9647058823529412,0.8313725490196078,0.],[0.9647058823529412,0.8392156862745098,0.],[0.9686274509803922,0.8470588235294118,0.],[0.9686274509803922,0.8588235294117647,0.],[0.9725490196078431,0.8666666666666667,0.],[0.9725490196078431,0.8745098039215686,0.],[0.9764705882352941,0.8862745098039215,0.],[0.9764705882352941,0.8941176470588235,0.],[0.9803921568627451,0.9019607843137255,0.],[0.9803921568627451,0.9098039215686274,0.],[0.984313725490196,0.9215686274509803,0.],[0.984313725490196,0.9294117647058824,0.],[0.9882352941176471,0.9372549019607843,0.],[0.9882352941176471,0.9490196078431372,0.],[0.9921568627450981,0.9568627450980391,0.],[0.9921568627450981,0.9647058823529412,0.],[0.996078431372549,0.9764705882352941,0.],[0.996078431372549,0.984313725490196,0.],[1.,0.9921568627450981,0.],[1.,1.,0.]])
  fire_colormap_data = np.array([[0. , 0. , 0. ],[0.02352941, 0. , 0. ],[0.05098039, 0. , 0. ],[0.07058824, 0. , 0. ],[0.08627451, 0. , 0. ],[0.09803922, 0. , 0. ],[0.10980392, 0. , 0. ],[0.12156863, 0. , 0. ],[0.13333333, 0. , 0. ],[0.14117647, 0. , 0. ],[0.14901961, 0. , 0. ],[0.15686275, 0. , 0. ],[0.16862745, 0. , 0. ],[0.17647059, 0. , 0. ],[0.18039216, 0. , 0. ],[0.18823529, 0. , 0. ],[0.19607843, 0. , 0. ],[0.20392157, 0. , 0. ],[0.20784314, 0. , 0. ],[0.21568627, 0. , 0. ],[0.21960784, 0. , 0. ],[0.22745098, 0. , 0. ],[0.23137255, 0. , 0. ],[0.23921569, 0. , 0. ],[0.24313725, 0. , 0. ],[0.25098039, 0. , 0. ],[0.25490196, 0. , 0. ],[0.2627451 , 0. , 0. ],[0.26666667, 0. , 0. ],[0.2745098 , 0. , 0. ],[0.27843137, 0. , 0. ],[0.28627451, 0. , 0. ],[0.29019608, 0. , 0. ],[0.29803922, 0. , 0. ],[0.30196078, 0. , 0. ],[0.30980392, 0. , 0. ],[0.31372549, 0. , 0. ],[0.32156863, 0. , 0. ],[0.3254902 , 0. , 0. ],[0.33333333, 0. , 0. ],[0.3372549 , 0. , 0. ],[0.34509804, 0. , 0. ],[0.34901961, 0.00392157, 0. ],[0.35686275, 0.00392157, 0. ],[0.36470588, 0.00392157, 0. ],[0.36862745, 0.00392157, 0. ],[0.37647059, 0.00392157, 0. ],[0.38039216, 0.00392157, 0. ],[0.38823529, 0.00392157, 0. ],[0.39607843, 0.00392157, 0. ],[0.4, 0.00392157, 0. ],[0.40784314, 0.00392157, 0. ],[0.41176471, 0.00392157, 0. ],[0.41960784, 0.00392157, 0. ],[0.42745098, 0.00392157, 0. ],[0.43137255, 0.00392157, 0. ],[0.43921569, 0.00392157, 0. ],[0.44313725, 0.00392157, 0. ],[0.45098039, 0.00392157, 0. ],[0.45882353, 0.00392157, 0. ],[0.4627451 , 0.00392157, 0. ],[0.47058824, 0.00784314, 0. ],[0.47843137, 0.00784314, 0. ],[0.48235294, 0.00784314, 0. ],[0.49019608, 0.00784314, 0. ],[0.49803922, 0.00784314, 0. ],[0.50196078, 0.00784314, 0. ],[0.50980392, 0.00784314, 0. ],[0.51764706, 0.00784314, 0. ],[0.52156863, 0.00784314, 0. ],[0.52941176, 0.00784314, 0. ],[0.5372549 , 0.00784314, 0. ],[0.54117647, 0.00784314, 0. ],[0.54901961, 0.01176471, 0. ],[0.55686275, 0.01176471, 0. ],[0.56470588, 0.01176471, 0. ],[0.56862745, 0.01176471, 0. ],[0.57647059, 0.01176471, 0. ],[0.58431373, 0.01176471, 0. ],[0.58823529, 0.01176471, 0. ],[0.59607843, 0.01176471, 0. ],[0.60392157, 0.01176471, 0. ],[0.61176471, 0.01176471, 0. ],[0.61568627, 0.01568627, 0. ],[0.62352941, 0.01568627, 0. ],[0.63137255, 0.01568627, 0. ],[0.63529412, 0.01568627, 0. ],[0.64313725, 0.01568627, 0. ],[0.65098039, 0.01568627, 0. ],[0.65882353, 0.01568627, 0. ],[0.6627451 , 0.01568627, 0. ],[0.67058824, 0.01960784, 0. ],[0.67843137, 0.01960784, 0. ],[0.68627451, 0.01960784, 0. ],[0.69019608, 0.01960784, 0. ],[0.69803922, 0.01960784, 0. ],[0.70588235, 0.01960784, 0. ],[0.71372549, 0.02352941, 0. ],[0.72156863, 0.02352941, 0. ],[0.7254902 , 0.02352941, 0. ],[0.73333333, 0.02352941, 0. ],[0.74117647, 0.02352941, 0. ],[0.74901961, 0.02745098, 0. ],[0.75294118, 0.02745098, 0. ],[0.76078431, 0.02745098, 0. ],[0.76862745, 0.02745098, 0. ],[0.77647059, 0.03137255, 0. ],[0.78431373, 0.03137255, 0. ],[0.78823529, 0.03137255, 0. ],[0.79607843, 0.03137255, 0. ],[0.80392157, 0.03529412, 0. ],[0.81176471, 0.03529412, 0. ],[0.81960784, 0.03529412, 0. ],[0.82352941, 0.03921569, 0. ],[0.83137255, 0.03921569, 0. ],[0.83921569, 0.03921569, 0. ],[0.84705882, 0.04313725, 0. ],[0.85490196, 0.04313725, 0. ],[0.85882353, 0.04705882, 0. ],[0.86666667, 0.04705882, 0. ],[0.8745098 , 0.05098039, 0. ],[0.88235294, 0.05098039, 0. ],[0.89019608, 0.05490196, 0. ],[0.89411765, 0.05882353, 0. ],[0.90196078, 0.05882353, 0. ],[0.90980392, 0.0627451 , 0. ],[0.91764706, 0.06666667, 0. ],[0.92156863, 0.0745098 , 0. ],[0.92941176, 0.07843137, 0. ],[0.93333333, 0.08627451, 0. ],[0.94117647, 0.09411765, 0. ],[0.94509804, 0.10588235, 0. ],[0.94901961, 0.11372549, 0. ],[0.95294118, 0.1254902 , 0. ],[0.96078431, 0.1372549 , 0. ],[0.96470588, 0.14901961, 0. ],[0.96470588, 0.16078431, 0. ],[0.96862745, 0.17254902, 0. ],[0.97254902, 0.18431373, 0. ],[0.97647059, 0.19607843, 0. ],[0.97647059, 0.20784314, 0. ],[0.98039216, 0.21960784, 0. ],[0.98039216, 0.23137255, 0. ],[0.98431373, 0.23921569, 0. ],[0.98431373, 0.25098039, 0. ],[0.98431373, 0.2627451 , 0. ],[0.98823529, 0.2745098 , 0. ],[0.98823529, 0.28627451, 0. ],[0.98823529, 0.29411765, 0. ],[0.99215686, 0.30588235, 0. ],[0.99215686, 0.31764706, 0. ],[0.99215686, 0.3254902 , 0. ],[0.99215686, 0.3372549 , 0. ],[0.99215686, 0.34509804, 0. ],[0.99607843, 0.35686275, 0. ],[0.99607843, 0.36470588, 0. ],[0.99607843, 0.37254902, 0. ],[0.99607843, 0.38431373, 0. ],[0.99607843, 0.39215686, 0. ],[0.99607843, 0.4, 0. ],[0.99607843, 0.40784314, 0. ],[0.99607843, 0.41960784, 0. ],[0.99607843, 0.42745098, 0. ],[0.99607843, 0.43529412, 0. ],[0.99607843, 0.44313725, 0. ],[0.99607843, 0.45098039, 0. ],[0.99607843, 0.45882353, 0. ],[0.99607843, 0.46666667, 0. ],[0.99607843, 0.4745098 , 0. ],[0.99607843, 0.48627451, 0. ],[1. , 0.49411765, 0. ],[1. , 0.50196078, 0. ],[1. , 0.50980392, 0. ],[1. , 0.51372549, 0. ],[1. , 0.52156863, 0. ],[1. , 0.52941176, 0. ],[1. , 0.5372549 , 0. ],[1. , 0.54509804, 0. ],[1. , 0.55294118, 0. ],[1. , 0.56078431, 0. ],[1. , 0.56862745, 0. ],[1. , 0.57647059, 0. ],[1. , 0.58039216, 0. ],[1. , 0.58823529, 0. ],[1. , 0.59607843, 0. ],[1. , 0.60392157, 0. ],[1. , 0.61176471, 0. ],[1. , 0.61568627, 0. ],[1. , 0.62352941, 0. ],[1. , 0.63137255, 0. ],[1. , 0.63921569, 0. ],[1. , 0.64313725, 0.00392157],[1. , 0.65098039, 0.00392157],[1. , 0.65882353, 0.00392157],[1. , 0.66666667, 0.00392157],[1. , 0.67058824, 0.00392157],[1. , 0.67843137, 0.00392157],[1. , 0.68627451, 0.00392157],[1. , 0.69019608, 0.00392157],[1. , 0.69803922, 0.00784314],[1. , 0.70588235, 0.00784314],[1. , 0.70980392, 0.00784314],[1. , 0.71764706, 0.00784314],[1. , 0.7254902 , 0.00784314],[1. , 0.72941176, 0.00784314],[1. , 0.7372549 , 0.01176471],[1. , 0.74117647, 0.01176471],[1. , 0.74901961, 0.01176471],[1. , 0.75686275, 0.01176471],[1. , 0.76078431, 0.01568627],[1. , 0.76862745, 0.01568627],[1. , 0.77647059, 0.01568627],[1. , 0.78039216, 0.01568627],[1. , 0.78823529, 0.01960784],[1. , 0.79215686, 0.01960784],[1. , 0.8, 0.01960784],[1. , 0.80784314, 0.02352941],[1. , 0.81176471, 0.02352941],[1. , 0.81960784, 0.02352941],[1. , 0.82352941, 0.02745098],[1. , 0.83137255, 0.02745098],[1. , 0.83529412, 0.03137255],[1. , 0.84313725, 0.03137255],[1. , 0.85098039, 0.03529412],[1. , 0.85490196, 0.03529412],[1. , 0.8627451 , 0.03921569],[1. , 0.86666667, 0.03921569],[1. , 0.8745098 , 0.04313725],[1. , 0.87843137, 0.04313725],[1. , 0.88627451, 0.04705882],[1. , 0.89019608, 0.05098039],[1. , 0.89803922, 0.05490196],[1. , 0.90196078, 0.05882353],[1. , 0.90980392, 0.0627451 ],[1. , 0.91764706, 0.06666667],[1. , 0.92156863, 0.07058824],[1. , 0.92941176, 0.07843137],[1. , 0.93333333, 0.09019608],[1. , 0.94117647, 0.10196078],[1. , 0.94509804, 0.11764706],[1. , 0.95294118, 0.14117647],[1. , 0.95686275, 0.16470588],[1. , 0.96078431, 0.19607843],[1. , 0.96862745, 0.23137255],[1. , 0.97254902, 0.27843137],[1. , 0.97647059, 0.3254902 ],[1. , 0.98431373, 0.38431373],[1. , 0.98431373, 0.44705882],[1. , 0.98823529, 0.51372549],[1. , 0.99215686, 0.58431373],[1. , 0.99607843, 0.65882353],[1. , 0.99607843, 0.72941176],[1. , 0.99607843, 0.8],[1. , 0.99607843, 0.87058824],[1. , 0.99607843, 0.93333333],[1. , 1. , 1. ]])
  def RGBToPyCmap(rgbdata):
      nsteps = rgbdata.shape[0]
      stepaxis = np.linspace(0, 1, nsteps)
      rdata=[]; gdata=[]; bdata=[]
      for istep in range(nsteps):
          r = rgbdata[istep,0]
          g = rgbdata[istep,1]
          b = rgbdata[istep,2]
          rdata.append((stepaxis[istep], r, r))
          gdata.append((stepaxis[istep], g, g))
          bdata.append((stepaxis[istep], b, b))
      mpl_data = {'red':   rdata,
                   'green': gdata,
                   'blue':  bdata}
      return mpl_data

  # fire cmap
  mpl_data = RGBToPyCmap(fire_colormap_data)
  plt.register_cmap(cmap=mpl.colors.LinearSegmentedColormap('fire', mpl_data, fire_colormap_data.shape[0]))
  mpl_data_r = RGBToPyCmap(fire_colormap_data[::-1,:])
  plt.register_cmap(cmap=mpl.colors.LinearSegmentedColormap('fire_r', mpl_data_r, fire_colormap_data.shape[0]))

  # IDL cmap
  mpl_data = RGBToPyCmap(idl_colormap_data)
  plt.register_cmap(cmap=mpl.colors.LinearSegmentedColormap('idl', mpl_data, idl_colormap_data.shape[0]))
  mpl_data_r = RGBToPyCmap(idl_colormap_data[::-1,:])
  plt.register_cmap(cmap=mpl.colors.LinearSegmentedColormap('idl_r', mpl_data_r, idl_colormap_data.shape[0]))

  # bipolar cmap
  lutsize=1024
  data = ((0, 1, 1), (0, 0, 1), (0, 0, 0), (1, 0, 0), (1, 1, 0))
  t = np.linspace(0, 1, lutsize//2)
  x1 = data[2][0]; y1 = data[2][1]; z1 = data[2][2]
  xc = data[1][0]; yc = data[1][1]; zc = data[1][2]
  x2 = data[0][0]; y2 = data[0][1]; z2 = data[0][2]
  w = 1.0
  r1 = (((1 - t)**2*x1 + 2*(1 - t)*t*w*xc + t**2*x2) /
        ((1 - t)**2 + 2*(1 - t)*t*w + t**2))
  g1 = (((1 - t)**2*y1 + 2*(1 - t)*t*w*yc + t**2*y2) /
        ((1 - t)**2 + 2*(1 - t)*t*w + t**2))
  b1 = (((1 - t)**2*z1 + 2*(1 - t)*t*w*zc + t**2*z2) /
        ((1 - t)**2 + 2*(1 - t)*t*w + t**2))
  x1 = data[2][0]; y1 = data[2][1]; z1 = data[2][2]
  xc = data[3][0]; yc = data[3][1]; zc = data[3][2]
  x2 = data[4][0]; y2 = data[4][1]; z2 = data[4][2]
  r2 = (((1 - t)**2*x1 + 2*(1 - t)*t*w*xc + t**2*x2) /
        ((1 - t)**2 + 2*(1 - t)*t*w + t**2))
  g2 = (((1 - t)**2*y1 + 2*(1 - t)*t*w*yc + t**2*y2) /
        ((1 - t)**2 + 2*(1 - t)*t*w + t**2))
  b2 = (((1 - t)**2*z1 + 2*(1 - t)*t*w*zc + t**2*z2) /
        ((1 - t)**2 + 2*(1 - t)*t*w + t**2))
  rgb1 = np.dstack((r1, g1, b1))[0]
  rgb2 = np.dstack((r2, g2, b2))[0]
  bibolar_colormap_data = np.concatenate((rgb1[1:][::-1], rgb2))

  mpl_data = RGBToPyCmap(bibolar_colormap_data)
  plt.register_cmap(cmap=mpl.colors.LinearSegmentedColormap('bipolar', mpl_data, bibolar_colormap_data.shape[0]))
  mpl_data_r = RGBToPyCmap(bibolar_colormap_data[::-1,:])
  plt.register_cmap(cmap=mpl.colors.LinearSegmentedColormap('bipolar_r', mpl_data_r, bibolar_colormap_data.shape[0]))
